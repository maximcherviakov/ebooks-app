name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*

jobs:
  test_server:
    name: Run Server Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests with Jest
        run: npm test -- --ci --reporters=default --reporters=jest-junit --reporters=jest-html-reporter
        continue-on-error: true

      - name: Upload Jest test results
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: server/junit.xml

      - name: Upload HTML Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-html
          path: server/test-report.html

  # test_ui:
  #   name: Run UI Tests
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: client
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 18
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Run Playwright tests
  #       run: npx playwright test
  #       continue-on-error: true
  #     - name: Check if tests were run
  #       id: check_tests
  #       run: |
  #         if [ -d "playwright-report" ] && [ "$(ls -A playwright-report)" ]; then
  #           echo "tests_ran=true" >> "$GITHUB_ENV"
  #         else
  #           echo "tests_ran=false" >> "$GITHUB_ENV"
  #         fi
  #     - uses: actions/upload-artifact@v4
  #       if: env.tests_ran == 'true' && !cancelled()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "BACKEND_HOST=${{ secrets.BACKEND_HOST }}" >> .env
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> .env
          echo "BACKEND_UPLOADED_BOOKS_PATH=${{ secrets.BACKEND_UPLOADED_BOOKS_PATH }}" >> .env
          echo "BACKEND_UPLOADED_THUMBNAILS_PATH=${{ secrets.BACKEND_UPLOADED_THUMBNAILS_PATH }}" >> .env
          echo "BACKEND_JWT_SECRET_KEY=${{ secrets.BACKEND_JWT_SECRET_KEY }}" >> .env
          echo "BACKEND_JWT_EXPIRES_IN=${{ secrets.BACKEND_JWT_EXPIRES_IN }}" >> .env
          echo "BACKEND_GOOGLE_CLIENT_ID=${{ secrets.BACKEND_GOOGLE_CLIENT_ID }}" >> .env
          echo "BACKEND_GOOGLE_CLIENT_SECRET=${{ secrets.BACKEND_GOOGLE_CLIENT_SECRET }}" >> .env
          echo "FRONTEND_HOST=${{ secrets.FRONTEND_HOST }}" >> .env
          echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" >> .env
          echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> .env
          echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> .env
          echo "MONGO_DB=${{ secrets.MONGO_DB }}" >> .env
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> .env
          echo "MONGO_PASS=${{ secrets.MONGO_PASS }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yaml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          timeout=60
          elapsed=0
          interval=5

          until [ "$elapsed" -ge "$timeout" ]; do
            if docker-compose -f docker-compose.ci.yaml ps --services | xargs -I{} docker-compose -f docker-compose.ci.yaml ps {} | grep -q "running"; then
              echo "All services are running."
              break
            fi
            echo "Waiting for services... ($elapsed/$timeout seconds)"
            sleep $interval
            elapsed=$((elapsed+interval))
          done

          if [ "$elapsed" -ge "$timeout" ]; then
            echo "Timed out waiting for services to start!"
            docker-compose -f docker-compose.ci.yaml logs
            exit 1
          fi

      - name: Run UI Tests
        run: |
          docker-compose -f docker-compose.ci.yaml up ui-tests --exit-code-from ui-tests
          test_exit_code=$?
          echo "UI tests completed with exit code: $test_exit_code"
          if [ $test_exit_code -eq 0 ]; then
            echo "tests_ran=true" >> $GITHUB_ENV
          else
            echo "tests_ran=false" >> $GITHUB_ENV
          fi

      - name: Shut down containers
        run: docker-compose -f docker-compose.ci.yaml down

      - uses: actions/upload-artifact@v4
        if: env.tests_ran == 'true' && !cancelled()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies (server)
        run: npm install
        working-directory: server

      - name: Install dependencies (client)
        run: npm install
        working-directory: client

      - name: Run ESLint and generate HTML report (server)
        run: npm run lint:html
        working-directory: server

      - name: Run ESLint and generate HTML report (client)
        run: npm run lint:html
        working-directory: client

      - name: Upload ESLint HTML Report (server)
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report-server
          path: server/eslint-report.html

      - name: Upload ESLint HTML Report (client)
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report-client
          path: client/eslint-report.html

  analyze:
    name: Analyze code with CodeQL
    runs-on: "ubuntu-latest"
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: javascript-typescript
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
